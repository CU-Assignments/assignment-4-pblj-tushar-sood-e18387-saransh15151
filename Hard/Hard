import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

// TicketBookingSystem to manage seat booking
class TicketBookingSystem {
    private final boolean[] seats;  // true means booked, false means available
    private final Lock lock;

    public TicketBookingSystem(int numSeats) {
        seats = new boolean[numSeats];
        lock = new ReentrantLock();
    }

    // Synchronized method to book a seat
    public void bookSeat(int seatNumber, String customerType) {
        lock.lock();  // Ensure only one thread can access this at a time
        try {
            if (seatNumber < 0 || seatNumber >= seats.length) {
                System.out.println(customerType + " trying to book invalid seat: " + seatNumber);
                return;
            }

            if (!seats[seatNumber]) {
                seats[seatNumber] = true;  // Book the seat
                System.out.println(customerType + " booked seat number " + seatNumber);
            } else {
                System.out.println(customerType + " failed to book seat " + seatNumber + " (already booked)");
            }
        } finally {
            lock.unlock();
        }
    }
}

// BookingThread simulates a customer booking a seat
class BookingThread extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final int seatNumber;
    private final String customerType;

    public BookingThread(TicketBookingSystem bookingSystem, int seatNumber, String customerType, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerType = customerType;
        setPriority(priority);  // Set thread priority (VIP gets higher priority)
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerType);
    }
}

// Main class to run the system
public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem(10);

        Thread[] threads = new Thread[10];

        // Create some VIP and regular booking threads
        threads[0] = new BookingThread(bookingSystem, 3, "VIP", Thread.MAX_PRIORITY);  // High Priority
        threads[1] = new BookingThread(bookingSystem, 3, "Regular", Thread.NORM_PRIORITY);
        threads[2] = new BookingThread(bookingSystem, 5, "VIP", Thread.MAX_PRIORITY);
        threads[3] = new BookingThread(bookingSystem, 5, "Regular", Thread.NORM_PRIORITY);
        threads[4] = new BookingThread(bookingSystem, 7, "Regular", Thread.NORM_PRIORITY);
        threads[5] = new BookingThread(bookingSystem, 1, "VIP", Thread.MAX_PRIORITY);
        threads[6] = new BookingThread(bookingSystem, 7, "VIP", Thread.MAX_PRIORITY);
        threads[7] = new BookingThread(bookingSystem, 1, "Regular", Thread.NORM_PRIORITY);
        threads[8] = new BookingThread(bookingSystem, 9, "Regular", Thread.NORM_PRIORITY);
        threads[9] = new BookingThread(bookingSystem, 9, "VIP", Thread.MAX_PRIORITY);

        // Start all threads
        for (Thread thread : threads) {
            thread.start();
        }

        // Wait for all threads to finish
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                System.err.println("Thread interrupted: " + e.getMessage());
            }
        }

        System.out.println("\nBooking process complete.");
    }
}
